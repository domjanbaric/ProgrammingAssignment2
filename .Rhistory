x<<-y
I<<-NULL
}
get<- function() x
setInverse<-function(Inverse) I<<-Inverse
getInverse<-function() I
list(set=set,get=get,setInverse=setInverse,getInverse=getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
I<-x$getInverse()
if(!is.null(I)){
print("Cache")
return(I)
}
data<-x$get()
I<-solve(x$get(),...)
x$setInverse(I)
I
}
C<-cacheSolve(B)
B$getInverse()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
I<-NULL
set<-function(y){
x<<-y
I<<-NULL
}
get<- function() x
setInverse<-function(Inverse) {I<<-Inverse
print("kurac")
}
getInverse<-function() I
list(set=set,get=get,setInverse=setInverse,getInverse=getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
I<-x$getInverse()
if(!is.null(I)){
print("Cache")
return(I)
}
data<-x$get()
I<-solve(x$get(),...)
x$setInverse(I)
I
}
C<-cacheSolve(B)
B$getInverse()
B$setInverse()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
I<-NULL
set<-function(y){
x<<-y
I<<-NULL
}
get<- function() x
setInverse<-function(Inverse) {I<<-Inverse
print("kurac")
}
getInverse<-function() I
list(set=set,get=get,setInverse=setInverse,getInverse=getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
I<-x$getInverse()
if(!is.null(I)){
print("Cache")
return(I)
}
data<-x$get()
print("kurcina")
I<-solve(x$get(),...)
x$setInverse(I)
I
}
C<-cacheSolve(B)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
I<-NULL
set<-function(y){
x<<-y
I<<-NULL
}
get<- function() x
setInverse<-function(Inverse) {I<<-Inverse
print("kurac")
}
getInverse<-function() I
list(set=set,get=get,setInverse=setInverse,getInverse=getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
I<-x$getInverse()
if(!is.null(I)){
print("Cache")
return(I)
}
data<-x$get()
I<-solve(data,...)
print("kurac")
x$setInverse(I)
I
}
C<-cacheSolve(B)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
I<-NULL
set<-function(y){
x<<-y
I<<-NULL
}
get<- function() x
setInverse<-function(Inverse) {I<<-Inverse
print("kurac")
}
getInverse<-function() I
list(set=set,get=get,setInverse=setInverse,getInverse=getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
I<-x$getInverse()
if(!is.null(I)){
print("Cache")
return(I)
}
data<-x$get()
I<-solve(data,...)
x$setInverse(I)
I
}
C<-cacheSolve(B)
C<-cacheSolve(B)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
I<-NULL
set<-function(y){
x<<-y
I<<-NULL
}
get<- function() x
setInverse<-function(Inverse) {I<<-Inverse
print("kurac")
}
getInverse<-function() I
list(set=set,get=get,setInverse=setInverse,getInverse=getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
I<-x$getInverse()
if(!is.null(I)){
print("Cache")
return(I)
}
data<-x$get()
I<-solve(data,...)
x$setInverse(I)
I
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
x<-c(1:10)
x
y<-makeVector(x)
y
y$get()
y$getmean()
cachemean(y)
cachemean(y)
y$setmean(8)
y$getmean()
B
B$getInverse()
B$getInverse(A)
B$setInverse(A)
B$getInverse(A)
B$getInverse()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
I<-NULL
set<-function(y){
x<<-y
I<<-NULL
}
get<- function() x
setInverse<-function(inverse) I<<-inverse
getInverse<-function() I
list(set=set,get=get,setInverse=setInverse,getInverse=getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
I<-x$getInverse()
if(!is.null(I)){
print("Cache")
return(I)
}
data<-x$get()
I<-solve(data,...)
x$setInverse(I)
I
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
B$setInverse(A)
B$getInverse()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
I<-NULL
set<-function(y){
x<<-y
I<<-NULL
}
get<- function() x
setInverse<-function(inverse) {I<<-inverse
print("kurcina purcina")
}
getInverse<-function() I
list(set=set,get=get,setInverse=setInverse,getInverse=getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
I<-x$getInverse()
if(!is.null(I)){
print("Cache")
return(I)
}
data<-x$get()
I<-solve(data,...)
x$setInverse(I)
I
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
B$setInverse(A)
A
solve(A)
a%*%slove(A)
A%*%slove(A)
A%*%solve(A)
makeCacheMatrix(A)
B<-makeCacheMatrix(A)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
I<-NULL
set<-function(y){
x<<-y
I<<-NULL
}
get<- function() x
setInverse<-function(inverse) {I<<-inverse
print("kurcina purcina")
}
getInverse<-function() I
list(set=set,get=get,setInverse=setInverse,getInverse=getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
I<-x$getInverse()
if(!is.null(I)){
print("Cache")
return(I)
}
data<-x$get()
I<-solve(data,...)
x$setInverse(I)
I
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
B<-makeCacheMatrix(A)
B$get()
B$set(solve(A))
B$get()
B$get()
B$setInverse(solve(A))
C<-cacheSolve(B)
clear
clear()
A<-matrix(1:9,3,3)
A
A[1,3]=0
A[3,1]=17
A[2,2]=2
A
solve(A)
B<-makeCacheMatrix(A)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
I<-NULL
set<-function(y){
x<<-y
I<<-NULL
}
get<- function() x
setInverse<-function(inverse) {I<<-inverse
print("kurcina purcina")
}
getInverse<-function() I
list(set=set,get=get,setInverse=setInverse,getInverse=getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
I<-x$getInverse()
if(!is.null(I)){
print("Cache")
return(I)
}
data<-x$get()
I<-solve(data,...)
x$setInverse(I)
I
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
B<-makeCacheMatrix(A)
B$get()
B$getInverse()
C<-cacheSolve(B)
C
C%*%A
A*%*%cacheSolve(B)
A%*%cacheSolve(B)
A[1,1]=-8
A
B<-makeCacheMatrix(A)
C<-cacheSolve(B)
C<-cacheSolve(B)
C
C%*%A
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
I<-NULL
set<-function(y){
x<<-y
I<<-NULL
}
get<- function() x
setInverse<-function(inverse) I<<-inverse
getInverse<-function() I
list(set=set,get=get,setInverse=setInverse,getInverse=getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
I<-x$getInverse()
if(!is.null(I)){
print("Cache")
return(I)
}
data<-x$get()
I<-solve(data,...)
x$setInverse(I)
I
}
A%*%cacheSolve(B)
A[3,3]=-22
A
B<-makeCacheMatrix(A)
C<-cacheSolve(B)
C
C<-cacheSolve(B)
A[2,1]=0
a
A
B$set(A)
C-<cacheSolve(B)
C<-cacheSolve(B)
C
C<-cacheSolve(B)
C
